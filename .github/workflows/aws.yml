name: Deploy Project 2 to ECS

on:
  push:
    branches:
      - branch2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1

    - name: Build and Push Docker Image
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: us-west-1
      run: |
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/project2-app"
        
        # Build the Docker image
        docker build -t $IMAGE_URI ./myproject1
        
        # Tag the image with "latest"
        docker tag $IMAGE_URI $IMAGE_URI:latest

        # Push the Docker image to ECR
        docker push $IMAGE_URI:latest

    - name: Run New ECS Task
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1
      run: |
        # Stop existing tasks
        TASK_ARN=$(aws ecs list-tasks \
          --cluster my-cluster \
          --family my-task-def \
          --region $AWS_REGION \
          --query "taskArns[0]" \
          --output text)

        if [ "$TASK_ARN" != "None" ]; then
          aws ecs stop-task --cluster my-cluster --task $TASK_ARN --region $AWS_REGION
        fi

        # Run new task
        aws ecs run-task \
          --cluster my-cluster \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-083f027b4042983e3],securityGroups=[sg-0ba1da8a176fc1e1c],assignPublicIp=ENABLED}" \
          --task-definition my-task-def:2 \
          --region $AWS_REGION
