name: Deploy to ECS

on:
  push:
    branches:
      - main
      - branch1
      - branch2
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Build and push Docker image
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/branch1" ]]; then
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/project1-app:latest"
          docker build -t $IMAGE_URI ./project1
          docker push $IMAGE_URI
        elif [[ "${{ github.ref }}" == "refs/heads/branch2" ]]; then
          IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/project2-app:latest"
          docker build -t $IMAGE_URI ./project2
          docker push $IMAGE_URI
        fi

    - name: Restart ECS Task
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/branch1" ]]; then
          TASK_ARN=$(aws ecs list-tasks \
            --cluster my-ec2-cluster \
            --service-name project1-service \
            --region $AWS_REGION \
            --query "taskArns[0]" \
            --output text)

          if [ "$TASK_ARN" != "None" ]; then
            aws ecs stop-task \
              --cluster my-ec2-cluster \
              --task $TASK_ARN \
              --region $AWS_REGION
          fi
        elif [[ "${{ github.ref }}" == "refs/heads/branch2" ]]; then
          TASK_ARN=$(aws ecs list-tasks \
            --cluster my-ec2-cluster \
            --service-name project2-service \
            --region $AWS_REGION \
            --query "taskArns[0]" \
            --output text)

          if [ "$TASK_ARN" != "None" ]; then
            aws ecs stop-task \
              --cluster my-ec2-cluster \
              --task $TASK_ARN \
              --region $AWS_REGION
          fi
        fi
