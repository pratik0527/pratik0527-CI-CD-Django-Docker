name: Deploy Project 1 to ECS

on:
  push:
    branches:
      - branch1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1

    - name: Build and Push Docker Image
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: us-west-1
      run: |
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/project1-app"
        
        # Build the Docker image
        docker build --no-cache -t $IMAGE_URI ./myproject
        
        # Tag the image with "latest"
        docker tag $IMAGE_URI $IMAGE_URI:latest

        # Push the Docker image to ECR
        docker push $IMAGE_URI:latest

        # Retrieve the digest of the pushed image
        IMAGE_DIGEST=$(aws ecr describe-images \
          --repository-name project1-app \
          --region $AWS_REGION \
          --query 'imageDetails[?imageTags[?@ == `latest`]].imageDigest' \
          --output text)

        echo "Image digest: $IMAGE_DIGEST"

    - name: Register New Task Definition Revision
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1
      run: |
        # Fetch the current task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition \
          --task-definition my-task-def \
          --region $AWS_REGION)

        # Update the container image URI digest for project1-app
        NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_DIGEST "$IMAGE_DIGEST" \
          '.taskDefinition | del(.status, .revision, .taskDefinitionArn, .requiresAttributes) |
          .containerDefinitions[1].image += "@" + $IMAGE_DIGEST')

        echo "$NEW_TASK_DEFINITION" > new-task-def.json
        echo "Registering new task definition revision..."

        # Register the new task definition revision
        aws ecs register-task-definition \
          --cli-input-json file://new-task-def.json \
          --region $AWS_REGION

    - name: Stop Existing ECS Tasks
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1
      run: |
        # Fetch the currently running tasks for the task family
        TASK_ARN_LIST=$(aws ecs list-tasks \
          --cluster my-cluster \
          --family my-task-def \
          --region $AWS_REGION \
          --query "taskArns" \
          --output text)

        # Stop all running tasks
        for TASK_ARN in $TASK_ARN_LIST; do
          echo "Stopping task $TASK_ARN"
          aws ecs stop-task --cluster my-cluster --task $TASK_ARN --region $AWS_REGION
        done

    - name: Run New ECS Task
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1
      run: |
        echo "Running a new ECS task..."
        aws ecs run-task \
          --cluster my-cluster \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-083f027b4042983e3],securityGroups=[sg-0ba1da8a176fc1e1c],assignPublicIp=ENABLED}" \
          --task-definition my-task-def \
          --region $AWS_REGION
