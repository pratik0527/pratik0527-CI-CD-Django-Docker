name: Deploy Project 1 to ECS

on:
  push:
    branches:
      - branch1

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1

    - name: Build and Push Docker Image for Project 1
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: us-west-1
      run: |
        IMAGE_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/project1-app"

        # Build the Docker image
        docker build -t $IMAGE_URI ./myproject

        # Tag the image with "latest"
        docker tag $IMAGE_URI $IMAGE_URI:latest

        # Push the Docker image to ECR
        docker push $IMAGE_URI:latest

    - name: Update Task Definition
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_REGION: us-west-1
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        TASK_DEFINITION_JSON=$(aws ecs describe-task-definition \
          --task-definition my-task-def \
          --query "taskDefinition" \
          --output json)

        # Remove metadata fields
        CLEANED_TASK_DEFINITION_JSON=$(echo $TASK_DEFINITION_JSON | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
        
        # Update container definitions with the new image
        UPDATED_CONTAINER_DEFINITIONS=$(echo $CLEANED_TASK_DEFINITION_JSON | jq '.containerDefinitions[] | select(.name == "project1") | .image = "'${AWS_ACCOUNT_ID}'.dkr.ecr.'${AWS_REGION}'.amazonaws.com/project1-app:latest"' | jq -s '.')

        # Replace the container definitions in the task definition
        NEW_TASK_DEFINITION=$(echo $CLEANED_TASK_DEFINITION_JSON | jq --argjson containers "$UPDATED_CONTAINER_DEFINITIONS" '.containerDefinitions = $containers')

        echo "$NEW_TASK_DEFINITION" > new-task-def.json

        # Register the updated task definition
        aws ecs register-task-definition --cli-input-json file://new-task-def.json

    - name: Stop Existing ECS Tasks
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1
      run: |
        TASK_ARN_LIST=$(aws ecs list-tasks \
          --cluster my-cluster \
          --family my-task-def \
          --region $AWS_REGION \
          --query "taskArns" \
          --output text)

        for TASK_ARN in $TASK_ARN_LIST; do
          echo "Stopping task $TASK_ARN"
          aws ecs stop-task --cluster my-cluster --task $TASK_ARN --region $AWS_REGION
        done

    - name: Run New ECS Task
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-west-1
      run: |
        aws ecs run-task \
          --cluster my-cluster \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-083f027b4042983e3],securityGroups=[sg-0ba1da8a176fc1e1c],assignPublicIp=ENABLED}" \
          --task-definition my-task-def \
          --region $AWS_REGION
